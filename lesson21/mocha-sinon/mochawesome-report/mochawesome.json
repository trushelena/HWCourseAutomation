{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-09T15:41:58.364Z",
    "end": "2025-04-09T15:41:58.368Z",
    "duration": 4,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c8c7a7ef-b645-474e-85fb-ad6270b66057",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f74cde9d-ea43-4f29-ae5f-0fb940e904b5",
          "title": "Deposit Account Tests with Mocks",
          "fullFile": "/Users/olenapopova/Documents/HWCourseAutomation/mocha-sinon/tests/test-deposit-account.spec.ts",
          "file": "/tests/test-deposit-account.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should prevent withdrawal from DepositAccount",
              "fullTitle": "Deposit Account Tests with Mocks should prevent withdrawal from DepositAccount",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const account=new import_abstraction.DepositAccount(\"Olena\",2e3,5);const accountMock=import_sinon.default.mock(account);accountMock.expects(\"withdraw\").throws(new Error(\"Withdrawals not allowed\"));(0,import_chai.expect)(()=>account.withdraw()).to.throw(\"Withdrawals not allowed\");accountMock.verify()",
              "err": {},
              "uuid": "7e15bb19-bc0d-4403-ad24-3235bebac577",
              "parentUUID": "f74cde9d-ea43-4f29-ae5f-0fb940e904b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply interest to DepositAccount",
              "fullTitle": "Deposit Account Tests with Mocks should apply interest to DepositAccount",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const account=new import_abstraction.DepositAccount(\"Olena\",2e3,5);const accountMock=import_sinon.default.mock(account);accountMock.expects(\"applyInterest\").once();accountMock.expects(\"getBalance\").returns(2100);account.applyInterest();account.getBalance();accountMock.verify()",
              "err": {},
              "uuid": "29efd152-3cb3-4d96-aab5-d43836c3b46a",
              "parentUUID": "f74cde9d-ea43-4f29-ae5f-0fb940e904b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e15bb19-bc0d-4403-ad24-3235bebac577",
            "29efd152-3cb3-4d96-aab5-d43836c3b46a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "a2db5360-6d65-4d72-8323-66d3ea13bf7b",
          "title": "SavingAccount Tests with Mocks",
          "fullFile": "/Users/olenapopova/Documents/HWCourseAutomation/mocha-sinon/tests/test-saving-account.spec.ts",
          "file": "/tests/test-saving-account.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should deposit money into SavingsAccount",
              "fullTitle": "SavingAccount Tests with Mocks should deposit money into SavingsAccount",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const account=new import_abstraction.SavingsAccount(\"Test Owner\",1e3);const accountMock=import_sinon.default.mock(account);const amount=500;accountMock.expects(\"deposit\").once().withArgs(amount);accountMock.expects(\"getBalance\").returns(1500);account.deposit(amount);account.getBalance();accountMock.verify()",
              "err": {},
              "uuid": "8f76b28f-463a-411a-92f4-32a817fe156c",
              "parentUUID": "a2db5360-6d65-4d72-8323-66d3ea13bf7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should withdraw money from SavingsAccount",
              "fullTitle": "SavingAccount Tests with Mocks should withdraw money from SavingsAccount",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const account=new import_abstraction.SavingsAccount(\"Olena\",1e3);const accountMock=import_sinon.default.mock(account);const amount=200;accountMock.expects(\"withdraw\").once().withArgs(amount);accountMock.expects(\"getBalance\").returns(800);account.withdraw(amount);account.getBalance();accountMock.verify()",
              "err": {},
              "uuid": "2f4040f7-dda0-4598-84a1-2f9c2d7eb6d2",
              "parentUUID": "a2db5360-6d65-4d72-8323-66d3ea13bf7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow negative deposit",
              "fullTitle": "SavingAccount Tests with Mocks should not allow negative deposit",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const account=new import_abstraction.SavingsAccount(\"Olena\",1e3);const accountMock=import_sinon.default.mock(account);accountMock.expects(\"deposit\").once().throws(new Error(\"Negative deposit not allowed\"));(0,import_chai.expect)(()=>account.deposit(-100)).to.throw(\"Negative deposit not allowed\")",
              "err": {},
              "uuid": "fc971e8d-0fc0-4570-83c2-42137e09ef26",
              "parentUUID": "a2db5360-6d65-4d72-8323-66d3ea13bf7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f76b28f-463a-411a-92f4-32a817fe156c",
            "2f4040f7-dda0-4598-84a1-2f9c2d7eb6d2",
            "fc971e8d-0fc0-4570-83c2-42137e09ef26"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 120000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}