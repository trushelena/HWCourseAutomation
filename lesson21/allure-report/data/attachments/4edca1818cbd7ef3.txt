# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Тести логіну >> Перенаправлення на сторінку відновлення пароля
- Location: /Users/olenapopova/Documents/HWCourseAutomation/lesson21/tests/qase/qase-test-logon.spec.ts:23:9

# Error details

```
Error: Error reading storage state from browser-context.json:
ENOENT: no such file or directory, open 'browser-context.json'
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { LoginPage } from '../../src/pages/qase-login.page';
   3 |
   4 |
   5 | test.describe('Тести логіну', () => {
   6 |     let loginPage: LoginPage;
   7 |
   8 |     test.beforeEach(async ({ page }) => {
   9 |         loginPage = new LoginPage(page);
  10 |         await loginPage.goto();
  11 |     });
  12 |
  13 |     test('Успішний вхід', async () => {
  14 |         await loginPage.login('trushelena1996@gmail.com', 'As2688AsTreshsd21$');
  15 |         await expect(loginPage.userAvatar).toBeVisible();
  16 |     });
  17 |
  18 |     test('Помилка при порожньому логіні', async () => {
  19 |         await loginPage.login('', 'somePassword');
  20 |         await loginPage.expectErrorMessage('This field is required');
  21 |     });
  22 |
> 23 |     test('Перенаправлення на сторінку відновлення пароля', async () => {
     |         ^ Error: Error reading storage state from browser-context.json:
  24 |         await loginPage.clickForgotPassword();
  25 |         await expect(loginPage.forgotPageLabel).toBeVisible();
  26 |     });
  27 |
  28 |     test('Відновлення пароля з правильною електронною поштою', async () => {
  29 |         await loginPage.clickForgotPassword();
  30 |         await loginPage.resetPassword('trushelena1996@gmail.com');
  31 |         await loginPage.expectSuccessMessage('We have e-mailed your password reset link!');
  32 |     });
  33 |
  34 |     test('Відновлення пароля з незареєстрованим юзером', async () => {
  35 |         await loginPage.clickForgotPassword();
  36 |         await loginPage.resetPassword('jshea@ingo.me');
  37 |         await loginPage.expectNotFoundMessage('User not found.');
  38 |     });
  39 |
  40 |     test('Помилка при відновленні пароля без введеного email', async () => {
  41 |         await loginPage.clickForgotPassword();
  42 |         await loginPage.resetPassword('');
  43 |         await loginPage.expectErrorMessage('This field is required');
  44 |     });
  45 | });
  46 |
```